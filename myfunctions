mfinstall(){
	# Install myfunctions on bashrc to run your functions as you open a new terminal
	BASHRC="$HOME/.bashrc"
	if [[ -f myfunctions ]]; then
		cp myfunctions $HOME/.myfunctions
	fi
	if [[ -f $BASHRC ]]; then
		INSTALLED=$(grep 'My Functions' $BASHRC > /dev/null ; echo $?)
		if [[ $INSTALLED -eq "0" ]]; then
			echo "Alredy Installed"
		else
			echo -e "\n# My Functions - By Plastico\nif [ -f ~/.myfunctions ]; then\n\t. ~/.myfunctions\nfi\n" >> $BASHRC
			echo "Myfunctions was installed successfully"
		fi
	else
		echo "File .bashrc not found"
	fi
}

myfunctions(){
	# Show functions in the file .myfunctions with a brief description of what they do
	grep -A1 '(){' $HOME/.myfunctions | grep -v 'grep\|echo' | sed 's/(){//' | tr '\n' ' ' | sed 's/#/:/g;s/\s\{1,\}/ /g;s/ -- /\n/g'
	echo
}

pagestatus(){
	# Return the HTTP status code from the given url
	HTTPSTATUS=$(curl -sI $1 | sed -r 's/HTTP\/1.. ([^23]..|[^3]0[1]|[23]0[^01]|300) [a-zA-Z]{1,}( [a-zA-Z]{1,})?/\1/;/^[0-9]{1,}/!d;1q' | tr -d '\r')
	if [[ -n $HTTPSTATUS ]]; then
		echo "$HTTPSTATUS - $1"
	else
		echo "OK - $1"
	fi
}

mincalc(){
	# Time sum based on the array of minutes given
	SECS=0
	MINS=0
	ARRAY=$@
	for i in ${ARRAY[@]}; do
		SEC=$(echo ${i} | cut -d: -f2)
		SECS=$(($SECS+$SEC))
	done
	for i in ${ARRAY[@]}; do
		MIN=$(echo ${i} | cut -d: -f1)
		MINS=$(($MINS+$MIN))
	done
	MINSFROMSECS=$(echo "$SECS/60" | bc)
	SECSFROMSECS=$(echo "$SECS%60" | bc)
	MINS=$(($MINSFROMSECS+$MINS))
	HOURSFROMMINS=$(echo "$MINS/60" | bc)
	MINSFROMMINS=$(echo "$MINS%60" | bc)
	TOTALHOURS=$(echo "000$HOURSFROMMINS" | sed 's/^.*\(..\)$/\1/')
	TOTALMINUTES=$(echo "000$MINSFROMMINS" | sed 's/^.*\(..\)$/\1/')
	TOTALSECONDS=$(echo "000$SECSFROMSECS" | sed 's/^.*\(..\)$/\1/')
	echo "$TOTALHOURS:$TOTALMINUTES:$TOTALSECONDS"
}

dropthejar(){
	# Add rules in iptables to block HotJar
	HOTJARURLS=(hotjar.com static.hotjar.com script.hotjar.com vars.hotjar.com insights.hotjar.com)

	for i in ${HOTJARURLS[@]}; do
		IPS=$(nslookup ${i} | grep 'Address:' | grep -v 127 | awk '{print $NF}')
		for j in ${IPS[@]}; do
			iptables -I INPUT -s ${j} -j DROP
			iptables -I OUTPUT -s ${j} -j DROP
		done
	done
}

percentage(){
        # Simple Percentage calculation
	if [[ -z $1 ]]; then
		echo "insert some value to calculate"
		return
	fi
	if [[ -z $2 ]]; then
		echo "insert some value to calculate" 
		return
	fi

	if [[ $1 -ge $2 ]]; then
		BIGGER=$1
		SMALLER=$2
	else
		BIGGER=$2
		SMALLER=$1
	fi
	RESPONSE=$(echo "($SMALLER/$BIGGER)*100" | bc -l)
	echo $RESPONSE
}

go(){
	# Launch a remote server access via ssh or rdesktop
	MONITORSIZE=$(xrandr -q | sed -r '/^[ ]{1,}([0-9]+x[0-9]+)[ ]{1,}[0-9]{1,}\.[0-9]\*.$/!d' | sort -u | awk '{print $1}')
	MONITORWIDTH=$(echo $MONITORSIZE | awk -Fx '{print $1"*.90"}' | bc | awk -F\. '{print $1}')
	MONITORHEIGHT=$(echo $MONITORSIZE | awk -Fx '{print $2"*.90"}' | bc | awk -F\. '{print $1}')
	TTL=$(ping -c 1 $1 | grep ttl | sed 's/^.* ttl=\([0-9]\{1,\}\) .*$/\1/')
	case $TTL in
		63 | 64 | 255 ) xterm -bg black -fg white -title $1 -e ssh -v $1 & ;;
		32 | 128 ) rdesktop $1 -g "$MONITORWIDTH"x"$MONITORHEIGHT" -r disk:dropbox=$HOME/Dropbox & ;;
	esac
}

geoipfetch(){
	# Geo Localization from a Given IP Address or Site URL
	IP=$(echo $1 | sed -r '/^(([1]?[0-9]{1,2}|2([0-4][0-9]|5[0-5])).){3}([1]?[0-9]{1,2}|2([0-4][0-9]|5[0-5]))$/!d')
	[[ $IP ]] || IP=$(nslookup $1 | grep 'Address:' | grep -v 127 | awk '{print $NF}')
	if [[ -z $IP ]]; then
		echo "Invalid IP or Name Address"
		return
	else
		curl -s http://ip-api.com/json/$IP | jq '.country' | sed 's/"//g'
	fi
}

formulaone(){
	# Show informations about the winner of the last race in F1
	curl -s https://ergast.com/api/f1/current/last/results.json | jq '.MRData.RaceTable.Races[] | "Race: " + .raceName + ", Circuit: " + .Circuit.circuitName + ", Winner: " + .Results[0].Driver.givenName + " " + .Results[0].Driver.familyName + ", Constructor: " + .Results[0].Constructor.name + ", Time: " + .Results[0].Time.time' | sed 's/"//g;s/, /\n/g'
}

miniws(){
	# Start a minimal Webserver in Python with the current directory as "root"
	python -m SimpleHTTPServer 8080
}

dolar(){
        # Great for Brazillian People, show the convertion between US Dolar and Brazillian Reals
        curl -s https://www.infomoney.com.br/mercados/cambio | \
        sed 's/<[^>]*>//g' | \
        grep -A7 'D&#243;lar \(Comercial\|Turismo\)' | \
        sed 's/^\s\+//g;s/\r//;/^$/d' | \
        tr '\n' ' ' | \
        awk -F' -- ' '{print "\t\tCompra\tVenda\n"$1"\n"$2}' | \
        sed -r 's/(D&#243;lar [A-Za-z]{1,}) ([0-9]{1,},[0-9]{1,}) ([0-9]{1,},[0-9]{1,}) [-+]?[0-9]{1,},[0-9]{1,}/\1\t\2\t\3/' |  \
        sed 's/&#243;/รณ/'
}

bitcoin(){
	# Show the convertion between Bitcoin and Brazillian Reals
	curl -s https://www.mercadobitcoin.net/api/BTC/ticker/ | \
	jq '.ticker.buy' | \
	sed 's/"//g;s/^\([0-9]\{1,\}\.[0-9]\{2\}\).*$/Valor: \1/'
}

myip(){
	# Show your Public IP
	ip=$(curl -s https://api.ipify.org)
	echo "My public IP address is: $ip"
}
